
`timescale 1ns / 1ps

module LFSR_32bit_tb;

    // Inputs
    reg clk;
    reg rst;
    reg btn;

    // Outputs
    wire [31:0] random;

    // Instantiate the Unit Under Test (UUT)
    LFSR_32bit uut (
        .clk(clk),
        .rst(rst),
        .btn(btn),
        .random(random)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // Toggle clock every 5 time units
    end

    // Testbench logic
    initial begin
        // Initialize inputs
        rst = 1;
        btn = 0;
        #20; // Wait for 20 time units

        // Release reset
        rst = 0;
        #10;

        // Simulate button press for manual step
        btn = 1;
        #10;
        btn = 0;
        #10;

        // Simulate continuous clock cycles
        repeat (20) begin
            btn = 1;
            #10;
            btn = 0;
            #10;
        end

        // End simulation
        $stop;
    end

    // Monitor the outputs
    initial begin
        // Only monitor when reset is de-asserted
        forever begin
            @(negedge rst); // Wait for reset to be de-asserted
            $monitor("Time: %0t | clk: %b | rst: %b | btn: %b | random: %h", $time, clk, rst, btn, random);
        end
    end

endmodule

